#!/bin/bash
set -euo pipefail

# ===========================
# Load config and env
# ===========================
CONFIG_FILE="/opt/ztcl/sys/config/config.sh"
ENV_FILE="/opt/ztcl/sys/config/.env"

if [[ -f "$CONFIG_FILE" ]]; then
  source "$CONFIG_FILE"
else
  echo "[!] Missing config.sh"
  exit 1
fi

if [[ -f "$ENV_FILE" ]]; then
  set -o allexport; source "$ENV_FILE"; set +o allexport
else
  echo "[!] Missing .env"
  exit 1
fi

# ===========================
# Flags
# ===========================
JSON=false
SHOW_USER=false

for arg in "$@"; do
  case "$arg" in
    --json) JSON=true ;;
    --user) SHOW_USER=true ;;
  esac
done

# ===========================
# Utilities
# ===========================
run_user_cmd() {
  if [[ "$SHOW_USER" == "true" ]]; then
    sudo -iu "$SYSTEM_USERNAME" bash -c "$*"
  else
    bash -c "$*"
  fi
}

# ===========================
# Tailscale status
# ===========================
TSC_IP="$(tailscale ip -4 2>/dev/null || echo "Not connected")"

# ===========================
# Systemd service status
# ===========================
SERVICE_STATUS="$(systemctl is-active ztcloud || echo "inactive")"

# ===========================
# Compose files
# ===========================
COMPOSE_FILE="$INSTALLER_PATH/sys/ztcloud-compose.yaml"
RESOLVED_FILE="$INSTALLER_PATH/sys/ztcloud-compose.resolved.yaml"

# ===========================
# UFW firewall
# ===========================
UFW_STATUS="$(ufw status | head -n1 || echo "unknown")"

# ===========================
# JSON output
# ===========================
if [[ "$JSON" == "true" ]]; then
  CONTAINERS_JSON=$(run_user_cmd 'podman ps --format "{{json .}}"' | jq -s '.' || echo '[]')
  HEALTH_JSON=$(run_user_cmd 'podman inspect --format "{\"name\":\"{{.Name}}\",\"health\":\"{{if .State.Healthcheck}}{{.State.Healthcheck.Status}}{{else}}no-healthcheck{{end}}\"}" $(podman ps -q)' | jq -s '.' || echo '[]')

  jq -n \
    --arg tailscale "$TSC_IP" \
    --arg status "$SERVICE_STATUS" \
    --arg compose "$COMPOSE_FILE" \
    --arg resolved "$RESOLVED_FILE" \
    --arg user "$SYSTEM_USERNAME" \
    --arg firewall "$UFW_STATUS" \
    --argjson containers "$CONTAINERS_JSON" \
    --argjson health "$HEALTH_JSON" \
    '{
      tailscale_ip: $tailscale,
      systemd_status: $status,
      compose_file: { path: $compose, exists: (test("^/") and ($compose | length > 0)) },
      resolved_compose: { path: $resolved, exists: (test("^/") and ($resolved | length > 0)) },
      system_user: $user,
      ufw_status: $firewall,
      containers: $containers,
      container_health: $health
    }'
  exit 0
fi

# ===========================
# Human-readable output
# ===========================
echo "========================================"
echo "[ZTCL STATUS CHECK]"
echo "========================================"
echo "[+] Tailscale IP: $TSC_IP"
echo "[+] systemd service status: $SERVICE_STATUS"

echo "[+] Running containers:"
run_user_cmd 'podman ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"'

echo "[+] Container health checks:"
run_user_cmd 'podman inspect --format "{{.Name}}: {{if .State.Healthcheck}}{{.State.Healthcheck.Status}}{{else}}no-healthcheck{{end}}" $(podman ps -q)'

echo "[+] Compose file: $COMPOSE_FILE"
[[ -f "$COMPOSE_FILE" ]] && echo "    ✅ Found" || echo "    ❌ Missing"

echo "[+] Resolved compose: $RESOLVED_FILE"
[[ -f "$RESOLVED_FILE" ]] && echo "    ✅ Found" || echo "    ❌ Missing"

echo "[+] UFW firewall status:"
ufw status

echo
echo "[+] Expected open ports from .env:"
echo "    SSH: 22/tcp"
echo "    Headscale HTTP: $HEADSCALE_HTTP_PORT/tcp"
echo "    STUN: $HEADSCALE_STUN_PORT/udp"
echo "    DERP/Caddy HTTPS: $CADDY_HTTPS_PORT/tcp"
echo "    DNS TCP: $COREDNS_TCP_PORT/tcp"
echo "    DNS UDP: $COREDNS_UDP_PORT/udp"

echo "[+] System user and permissions:"
id "$SYSTEM_USERNAME" &>/dev/null && echo "    ✅ User exists: $SYSTEM_USERNAME" || echo "    ❌ User missing"
